//Nguyen Li
//Car Instrument Simulator
//April 25th

public class NLi_CarInstrumentSimulator 
{
	class FuelGauge 
  {
    final static int MAXIMUM_GALLONS = 15;
		private int gallons;

		public FuelGauge() 
    {
			gallons = 0;
		}

		public FuelGauge(int gallons) 
    {
			if (gallons <= MAXIMUM_GALLONS) {
				this.gallons = gallons;
			} else {
				gallons = MAXIMUM_GALLONS;
			}
		}

		public int getGallons() 
    {
			return gallons;
		}

    //Adds a galleon, displays message if full
		public void addGallons() 
    {
			if (gallons < MAXIMUM_GALLONS) 
      {
				gallons++;
			} 
        else 
      {
				System.out.println("Tank is full!");
			}
		}

    //fuel reduce by 1, display message if tank is empty
		public void burnFuel() 
    {
			if (gallons > 0) 
      {
				gallons--;
			} else {
				System.out.println("Out of fuel!");
			}
		}
	}

	class Odometer 
  {
		//variables
		public final int MAXIMUM_MILEAGE = 999999;
		public final int MPG = 24;
		private int initialMileage;
		private int mileage;
		private FuelGauge fuelGauge;

		public Odometer(int mileage, FuelGauge fuelGauge) 
    {
			this.initialMileage = mileage;
			this.mileage = mileage;
			this.fuelGauge = fuelGauge;
		}

		public int getMileage() 
    {
			return mileage;
		}
    //mileage
		public void addMileage() 
    {
			if (mileage < MAXIMUM_MILEAGE) 
      {
				mileage++;
			} else {
				mileage = 0;
			}
			int driven = initialMileage - mileage;
			if (driven % MPG == 0) 
      {
				fuelGauge.burnFuel();
			}
		}
	}

	public static void main(String[] args) 
  {
  
		NLi_CarInstrumentSimulator carInstrumentSimulator = new NLi_CarInstrumentSimulator();
    
		FuelGauge fuel = carInstrumentSimulator.new FuelGauge();
    
		Odometer odometer = carInstrumentSimulator.new Odometer(0, fuel);

		for (int x = 0; x < FuelGauge.MAXIMUM_GALLONS; x++) 
    {
			fuel.addGallons();
		}

		  //empty tank
		  while (fuel.getGallons() > 0) {

		  //miles driven
			odometer.addMileage();

			// Display mileage
			System.out.println("Mileage: " + odometer.getMileage());

			// Display the fuel
			System.out.println("Fuel level: " + fuel.getGallons() + " gallons");
			System.out.println("------------------------------");
		}
	}
}




/**
ASSIGNMENT:
For this assignment, you will design two classes that work together to simulate a car's fuel gauge and odometer. 
The classes you will design are the following:

1. The FuelGauge Class: This class will simulate a fuel gauge. Its responsibilities are:

To know the car's current amount of fuel, in gallons.
To report the car's current amount of fuel, in gallons.
To be able to increment the amount of fuel by one gallon. This simulates putting fuel in the car. (The car can hold a maximum of 15 gallons).
To be able decrement the amount of fuel by one gallon, if the amount of fuel is greater than zero gallons. 
This simulates burning fuel when the car's engine is running.
2.  The Odometer Class: This class will simulate the car's odometer. Its responsibilities are:

To know the car's current mileage.
To report the car's current mileage.
To be able to increment the current mileage by one mile. the maximum mileage on the odometer is 99,999 miles. 
When this amount is exceeded, the odometer resets the current mileage to 0.
To be able to work with the a FuelGauge object. 
It should decrease the FuelGauage object's current amount of fuel by one gallon for every 24 miles the car has traveled. 
(This addresses the car's fuel economy is 24 miles per gallon).
Demonstrate the classes by creating instances of each. 
Simulate filling the car up with fuel, and then run a loop that increments the odometer until the car runs out of fuel. 
During each loop iteration, print out the car's mileage and amount of fuel.
*/
